#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+BEGIN_COMMENT
#+STYLE: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+END_COMMENT
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil 
#+TITLE:BGS Safe
#+AUTHOR: Paul Dougall, Stephen Brown and Kevin Wackett

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/stcd11/X-SC-Extension">Fork me on GitHub</a>
</div>
<center>
<imgzz src='' width=33%>
</center>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

e* Introduction
[[file:img/pic.jpg]]
:PROPERTIES:
:HTML_CONTAINER_CLASS: intro
:END:
** What are PIC chips?
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
Peripheral Interface Controllers are small silicon chips which can be programmed to perform useful tasks.
In school, we tend to use Genie branded chips, like the C08 model you will use in this project. Others (e.g. PICAXE) are available.
PIC chips allow you connect different inputs (e.g. switches) and outputs (e.g. LEDs, motors and speakers), and to control them using flowcharts.
Chips such as these can be found everywhere in consumer electronic products, from toasters to cars. 

While they might not look like much, there is more computational power in a single PIC chip used in school than there was in the space shuttle that went to the moon in the 60's!
** When would I use a PIC chip?
Imagine you wanted to make a flashing bike light; using an LED and a switch alone, you'd need to manually push and release the button to get the flashing effect. A PIC chip could be programmed to turn the LED off and on once a second.
In a board game, you might want to have an electronic dice to roll numbers from 1 to 6 for you. 
In a car, a circuit is needed to ensure that the airbags only deploy when there is a sudden change in speed, AND the passenger is wearing their seatbelt, AND the front or rear bumper has been struck. PIC chips can carry out their instructions very quickly, performing around 1000 instructions per second - as such, they can react far more quickly than a person can. 
* Introduction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- In this extension project you will be designing your own PCB and etching your own board.
- This will take a *long* time with have been warned. However it maybe good to work on in little sections when you finish each topic a little early or tackle at lunchtimes.
- The box design has been provided but as a Solidworks task you may want to design your own. However I would recommend *strongly* using our locking mechanism.
- You will then need to build the box.
- Finally the PIC will need programming to allow the keypad to turn the servo and open the box.

[[./img/Safe3D.png]]

* The circuit
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:

- Open Circuit Wizard and make the following circuit:

[[./img/SafeCircuit.png]]

- Click on the PCB Tab and make the following circuit:

[[./img/PCBView.png]]

[[./img/RealWorldWithOffBoard.png]]

* The box
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- Here is the plan for the box.

[[./Resources/SafeBoxPlan.dtd][Safebox Plan]]

- This will need to cut out on the lasercutter.

- Use the next two videos to construct the box.

#+BEGIN_HTML

<iframe width="560" height="315" src="https://www.youtube.com/embed/HZ9lVgmiOkY" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9p0WQ8cbWLI" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe>

#+END_HTML
* Programming the safe
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
- You will need to open your circuit wizard file.
- This will need to be coded in GENIE Basic.
- More to follow...
